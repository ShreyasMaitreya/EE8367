#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <pthread.h>

#define SIZE 1000000
#define NUM_THREADS 4

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i+1], &arr[high]);
    return i+1;
}

void* quicksort_thread(void* args) {
    int* arr = (int*)args;
    int thread_id = arr[0];
    int low = arr[1];
    int high = arr[2];

    if (low < high) {
        int pi = partition(arr, low, high);
        int new_args1[3] = {thread_id, low, pi - 1};
        int new_args2[3] = {thread_id, pi + 1, high};
        pthread_t tid1, tid2;
        pthread_create(&tid1, NULL, quicksort_thread, new_args1);
        pthread_create(&tid2, NULL, quicksort_thread, new_args2);
        pthread_join(tid1, NULL);
        pthread_join(tid2, NULL);
    }

    pthread_exit(NULL);
}

double get_execution_time(clock_t start_time, clock_t end_time) {
    return ((double)(end_time - start_time)) / CLOCKS_PER_SEC;
}

int main() {
    int arr[SIZE];
    srand(time(NULL));

    // populate array with random integers
    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % 1000;
    }

    int thread_args[NUM_THREADS][3];
    pthread_t threads[NUM_THREADS];

    clock_t start_time = clock();

    // create threads and split work among them
    for (int i = 0; i < NUM_THREADS; i++) {
        int low = (i * SIZE) / NUM_THREADS;
        int high = ((i + 1) * SIZE / NUM_THREADS) - 1;
        thread_args[i][0] = i;
        thread_args[i][1] = low;
        thread_args[i][2] = high;
        pthread_create(&threads[i], NULL, quicksort_thread, thread_args[i]);
    }

    // join threads
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    clock_t end_time = clock();
    double execution_time = get_execution_time(start_time, end_time);

    printf("Sorted array:\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d ", arr[i]);
    }
    printf("\nExecution time: %f seconds\n", execution_time);

    return 0;
}
